# -*- coding: utf-8 -*-
"""sentiment analysis restaurant review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ME_A8oZkdNlloLHo4pw7IXJSaPNbxam1
"""

from google.colab import drive
drive.mount('/content/drive/')

import numpy as np
import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/Restaurant_Reviews.tsv',delimiter='\t',quoting=3)

data.shape

data.columns

data.head()

data.info

import nltk
import re
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

corpus = []
for i in range(0,1000):
  review = re.sub(pattern = '[^a-zA-Z]',repl=' ',string=data['Review'][i])
  review = review.lower()
  review_words = review.split()
  review_words = [word for word in review_words if not word in set(stopwords.words('english'))]
  ps = PorterStemmer()
  review = [ps.stem(word) for word in review_words]
  review = ' '.join(review)
  corpus.append(review)

corpus[:1500]

from sklearn.feature_extraction.text import TfidfVectorizer
cv = TfidfVectorizer()
X = cv.fit_transform(corpus).toarray()
y = data.iloc[:,1].values

"""Split data"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20 , random_state=None)

X_train.shape, X_test.shape,y_train.shape,y_test.shape

"""Model Training"""

from sklearn.svm import SVC
classifier = SVC(kernel="rbf")
classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)
y_pred
print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score,recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3 = recall_score(y_test,y_pred)
print("------Scores------")
print("Accuracy score is : {}%".format(round(score1*100,2)))
print("Precision score is : {}%".format(round(score2*100,2)))
print("Recall score is : {}%".format(round(score3*100,2)))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)

cm

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
plt.figure(figsize = (10,6))
sns.heatmap(cm,annot=True,cmap='YlGnBu',xticklabels=['Negative','Positive'],yticklabels=['Negative','Positive'])
plt.xlabel("Predicted values")
plt.ylabel("Actual values")

from sklearn.model_selection import GridSearchCV

# defining parameter range
param_grid = {'C': [0.1, 1, 10, 100, 1000],
			'gamma': [1, 0.1, 0.01, 0.001, 0.0001],
			'kernel': ['rbf']}

grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)

# fitting the model for grid search
grid.fit(X_train, y_train)

# print best parameter after tuning
print(grid.best_params_)

# print how our model looks after hyper-parameter tuning
print(grid.best_estimator_)

grid_predictions = grid.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, grid_predictions))

def predict_sentiment(sample_review):
  sample_review = re.sub(pattern = '[^a-zA-Z]',repl=' ',string = sample_review)
  sample_review = sample_review.lower()
  sample_review_words = sample_review.split()
  sample_review_words = [word for word in sample_review_words if not word in set(stopwords.words('english'))]
  ps = PorterStemmer()
  final_review = [ps.stem(word) for word in sample_review_words]
  final_review = ' '.join(final_review)
  temp = cv.transform([final_review]).toarray()
  return grid.predict(temp)

#predicting values
sample_review = "The food is really bad."
if predict_sentiment(sample_review):
  print("This is a positive review.")
else:
  print("This is a negative review.")

sample_review = "Food was pretty bad and the service was very slow."
if predict_sentiment(sample_review):
  print("This is a positive review.")
else:
  print("This is a negative review.")

sample_review = "The food was absolutely wonderful"
if predict_sentiment(sample_review):
  print("This is a positive review.")
else:
  print("This is a negative review.")